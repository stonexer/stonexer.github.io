{"version":3,"sources":["serviceWorker.js","pages/Home/particlesConfig.js","components/SpringCard/index.jsx","pages/Home/index.jsx","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","particlesConfig","particles","number","value","density","enable","value_area","color","shape","type","stroke","width","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","push","particles_nb","remove","retina_detect","SpringCard","ref","React","useRef","_React$useState","useState","_React$useState2","Object","slicedToArray","isHovered","setHovered","_useSpring","useSpring","xys","mass","tension","friction","precision","_useSpring2","animatedProps","setAnimatedProps","react_default","a","createElement","web","div","className","onMouseEnter","onMouseMove","_ref","clientX","clientY","x","current","offsetLeft","scrollX","pageXOffset","document","body","scrollLeft","offsetTop","scrollY","pageYOffset","scrollTop","clientHeight","clientWidth","onMouseLeave","style","zIndex","transform","interpolate","y","s","concat","id","href","Home","particles_default","params","height","innerHeight","display","components_SpringCard","App","pages_Home","ReactDOM","render","src_App","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.759a8d9d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\n  particles: {\n    number: {\n      value: 100,\n      density: {\n        enable: false,\n        value_area: 600,\n      },\n    },\n    color: {\n      value: '#ffffff',\n    },\n    shape: {\n      type: 'circle',\n      stroke: {\n        width: 0,\n        color: '#000000',\n      },\n    },\n    opacity: {\n      value: 0.2,\n      random: false,\n      anim: {\n        enable: false,\n        speed: 1,\n        opacity_min: 0.1,\n        sync: false,\n      },\n    },\n    size: {\n      value: 3,\n      random: true,\n      anim: {\n        enable: false,\n        speed: 40,\n        size_min: 0.1,\n        sync: false,\n      },\n    },\n    line_linked: {\n      enable: false,\n      distance: 150,\n      color: '#ffffff',\n      opacity: 0.4,\n      width: 1,\n    },\n    move: {\n      enable: true,\n      speed: 10,\n      direction: 'left',\n      random: true,\n      straight: true,\n      out_mode: 'out',\n      bounce: false,\n      attract: {\n        enable: false,\n        rotateX: 600,\n        rotateY: 1200,\n      },\n    },\n  },\n  interactivity: {\n    detect_on: 'canvas',\n    events: {\n      onhover: {\n        enable: false,\n        mode: 'grab',\n      },\n      onclick: {\n        enable: true,\n        mode: 'repulse',\n      },\n      resize: true,\n    },\n    modes: {\n      grab: {\n        distance: 200,\n        line_linked: {\n          opacity: 1,\n        },\n      },\n      bubble: {\n        distance: 400,\n        size: 40,\n        duration: 2,\n        opacity: 8,\n        speed: 3,\n      },\n      repulse: {\n        distance: 200,\n        duration: 0.4,\n      },\n      push: {\n        particles_nb: 4,\n      },\n      remove: {\n        particles_nb: 2,\n      },\n    },\n  },\n  retina_detect: true,\n};\n","import React from 'react';\nimport { useSpring, animated } from 'react-spring';\n\nimport './index.css';\n\nfunction SpringCard() {\n  // We add this ref to card element and use in onMouseMove event ...\n  // ... to get element's offset and dimensions.\n  const ref = React.useRef();\n\n  // Keep track of whether card is hovered so we can increment ...\n  // ... zIndex to ensure it shows up above other cards when animation causes overlap.\n  const [isHovered, setHovered] = React.useState(false);\n\n  const [animatedProps, setAnimatedProps] = useSpring(() => ({\n    // Array containing [rotateX, rotateY, and scale] values.\n    // We store under a single key (xys) instead of separate keys ...\n    // ... so that we can use animatedProps.xys.interpolate() to ...\n    // ... easily generate the css transform value below.\n    xys: [0, 0, 1],\n    // Setup physics\n    config: { mass: 10, tension: 400, friction: 30, precision: 0.001 },\n  }));\n\n  return (\n    <animated.div\n      ref={ref}\n      className=\"card\"\n      onMouseEnter={() => setHovered(true)}\n      onMouseMove={({ clientX, clientY }) => {\n        // Get mouse x position within card\n        const x =\n          clientX -\n          (ref.current.offsetLeft -\n            (window.scrollX || window.pageXOffset || document.body.scrollLeft));\n\n        // Get mouse y position within card\n        const y =\n          clientY -\n          (ref.current.offsetTop -\n            (window.scrollY || window.pageYOffset || document.body.scrollTop));\n\n        // Set animated values based on mouse position and card dimensions\n        const dampen = 16; // Lower the number the less rotation\n        const xys = [\n          -(y - ref.current.clientHeight / 2) / dampen, // rotateX\n          (x - ref.current.clientWidth / 2) / dampen, // rotateY\n          1.2, // Scale\n        ];\n\n        // Update values to animate to\n        setAnimatedProps({ xys: xys });\n      }}\n      onMouseLeave={() => {\n        setHovered(false);\n        // Set xys back to original\n        setAnimatedProps({ xys: [0, 0, 1] });\n      }}\n      style={{\n        // If hovered we want it to overlap other cards when it scales up\n        zIndex: isHovered ? 2 : 1,\n        // Interpolate function to handle css changes\n        transform: animatedProps.xys.interpolate(\n          (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`,\n        ),\n      }}\n    >\n      <div id=\"logo\" />\n      <h1>ST<span className=\"one\">one</span>X</h1>\n      <div className=\"pages\">\n        <a href=\"https://www.sitixi.com/blog\">Blog</a>\n        <a href=\"https://github.com/stonexer\">Github</a>\n      </div>\n    </animated.div>\n  );\n}\n\nexport default SpringCard;\n","import React from 'react';\nimport Particles from 'react-particles-js';\n\nimport particlesConfig from './particlesConfig';\nimport SpringCard from '../../components/SpringCard';\n\nimport './index.css';\n\nfunction Home() {\n  return (\n    <div className=\"home\">\n      <Particles\n        params={particlesConfig}\n        height={window.innerHeight}\n        style={{ display: 'block' }}\n      />\n      <div className=\"content\">\n        <SpringCard />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nimport Home from './pages/Home';\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}